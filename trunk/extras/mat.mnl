{ let
  { MatExtern =
    { let { _Elems; _Rows; _Cols } in
    : let rec
      { Mat =
        { proc { Rows; Cols } as
        : object { _Elems = {array Rows * Cols of 0}; _Rows = Rows; _Cols = Cols } with
          Apply =
          { proc { A; I; J } as
            A[_Elems]@[(I - 1) * A[_Cols]@ + (J - 1)]
          }
          Repl =
          { proc { A; I; J; V } as
            A[_Elems]@ = Repl[A[_Elems]@!; (I - 1) * A[_Cols]@ + (J - 1); V]; A
          }
          (+) =
          { proc { A; B } as
            { var { I } in
              I = 1
            : while I <= A[_Rows]@ do
              { var { J } in
                J = 1
              : while J <= A[_Cols]@ do
                A[I; J] = A[I; J] + B[I; J]
                J = J + 1
              }
              I = I + 1
            }
            A
          }
        }
      }
      in
    : export Mat
    }
  }
  in
: MatExtern
  in
: var { A; B; C } in
  A = Mat[10; 10]
  B = Mat[10; 10]
  A[1; 1] = 1
  A[2; 2] = 2
  B[1; 1] = 10
  { var { I } in
    I = 0
  : while I < 100000 do
    C = A + B
    I = I + 1
  }
  WriteLine[Out; Str[C[1; 1]]]
}

