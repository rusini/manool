{ {extern "manool/build/std-1.0"} in
: do
  { let { _Num; _Den } in
  : let { IsRat = {object probe _Num; _Den} } in -- classification
  : let rec
    { Rat = -- construction
      { proc { Num; Den } as
      : var { Gcd = Gcd% } in
      : object { _Num = Num / Gcd; _Den = Den / Gcd } with
        -- extractors
        Num = {proc {A} as A[_Num]@}
        Den = {proc {A} as A[_Den]@}
        -- arithmetic operations
        (+) =
        { proc { A; B } as
          {raise TypeMismatch if ~IsRat[B]}
          Rat[Num[A] * Den[B] + Num[B] * Den[A]; Den[A] * Den[B]]
        }
        (-) =
        { proc { A; B } as
          {raise TypeMismatch if ~IsRat[B]}
          Rat[Num[A] * Den[B] - Num[B] * Den[A]; Den[A] * Den[B]]
        }
        (*) =
        { proc { A; B } as
          {raise TypeMismatch if ~IsRat[B]}
          Rat[Num[A] * Num[B]; Den[A] * Den[B]]
        }
        (/) =
        { proc { A; B } as
          {raise TypeMismatch if ~IsRat[B]}
          {raise DivisionByZero if Num[B] == I48[0]$}
          Rat[Num[A] * Den[B]; Den[A] * Num[B]]
        }
        Neg =
        { proc { A } as
          Rat[Neg[Num[A]]; Den[A]]
        }
        -- comparison
        (==) =
        { proc { A; B } as
           IsRat[B] & (Num[A] == Num[B]) & (Den[A] == Den[B])
        }
        (<>) =
        { proc { A; B } as
          ~IsRat[B] | (Num[A] <> Num[B]) | (Den[A] <> Den[B])
        }
        (<)  =
        { proc { A; B } as
          {raise TypeMismatch if ~IsRat[B]}
          Num[A] * Den[B] <  Num[B] * Den[A]
        }
        (<=) =
        { proc { A; B } as
          {raise TypeMismatch if ~IsRat[B]}
          Num[A] * Den[B] <= Num[B] * Den[A]
        }
        (>)  =
        { proc { A; B } as
          {raise TypeMismatch if ~IsRat[B]}
          Num[A] * Den[B] >  Num[B] * Den[A]
        }
        (>=) =
        { proc { A; B } as
          {raise TypeMismatch if ~IsRat[B]}
          Num[A] * Den[B] >= Num[B] * Den[A]
        }
        Order =
        { proc { A; B } as
          {raise TypeMismatch if ~IsRat[B]}
          Order[Num[A] * Den[B]; Num[B] * Den[A]]
        }
        -- conversions
        Str = {proc {A} as Str[Num[A]] + "/" + Str[Den[A]]}
        Int = {proc {A} as Num[A] / Den[A]}
      } -- proc
    }
    in
  : let
    { _ = -- unit tests
      { do
        {raise TestsFailed if Rat[1; 2] + Rat[3; 4] <> Rat[5; 4]}
        {raise TestsFailed if Rat[1; 2] - Rat[3; 4] <> Rat[1; 4].Neg[]}
        {raise TestsFailed if Rat[1; 2] * Rat[3; 4] <> Rat[3; 8]}
        {raise TestsFailed if Rat[1; 2] / Rat[3; 4] <> Rat[2; 3]}
        {raise TestsFailed if Rat[1; 2] > Rat[3; 4]}
      }
    }
    in
  : export
    Rat = -- construction
    { proc { Num; Den } as
      {raise TypeMismatch if ~IsI48[Num] | ~IsI48[Den]}
      {raise DivisionByZero if Den == I48[0]$}
      {raise Undefined if Den < I48[0]$}
      Rat[Num; Den]
    }
    IsRat = IsRat -- classification
  } -- let
where
  Gcd = -- Greatest Common Divisor of {Num, Den} - snippet of code
  { if Num == I48[0]$ then Den else
  : var { A = Abs[Num]; B = Den } in
  : do A after
  : while A <> B do: if A > B then A = A - B else B = B - A -- Euclidean algorithm
  }'
}
